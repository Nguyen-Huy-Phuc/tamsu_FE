import React, { useEffect, useState, useMemo } from 'react';
import { useParams, Link, useSearchParams } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';
import { getOrderByCode, generateZaloLink, formatTransactionStatus, type OrderDetails } from '../services/transactionService';
import { fetchPackageById, processPackageForUI } from '../services/packageService';
import LoadingSpinner from '../components/LoadingSpinner';
import { CheckCircle, MessageCircle, Clock, Phone, Copy } from 'lucide-react';
import type { ConsultationPackage } from '../types';

const PurchaseSuccessPage: React.FC = () => {
  console.log('üîß PurchaseSuccessPage render');

  const { packageId } = useParams<{ packageId: string }>();
  const { user } = useAuth();
  const [searchParams] = useSearchParams();

  console.log('üîß packageId:', packageId);
  console.log('üîß searchParams:', Object.fromEntries(searchParams));

  const [orderData, setOrderData] = useState<OrderDetails | null>(null);
  const [packageData, setPackageData] = useState<ConsultationPackage | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // L·∫•y orderCode t·ª´ URL params m·ªôt l·∫ßn v√† kh√¥ng thay ƒë·ªïi
  const orderCodeFromUrl = searchParams.get('orderCode');
  const orderCode = useMemo(() => {
    const code = orderCodeFromUrl || `TH${Date.now().toString().slice(-8)}`;
    console.log('üîß orderCode computed:', code);
    return code;
  }, [orderCodeFromUrl]);

  useEffect(() => {
    console.log('üîß useEffect triggered with deps:', { packageId, orderCodeFromUrl });

    const loadOrderAndPackageData = async () => {
      try {
        console.log('üîß Loading data...');
        setLoading(true);
        setError(null);

        // N·∫øu c√≥ orderCode t·ª´ URL, l·∫•y th√¥ng tin order
        if (orderCodeFromUrl) {
          try {
            const orderResponse = await getOrderByCode(orderCode);
            setOrderData(orderResponse.data);
          } catch (err) {
            console.warn('Failed to load order data:', err);
          }
        }

        // N·∫øu c√≥ packageId, l·∫•y th√¥ng tin package
        if (packageId) {
          try {
            const packageResponse = await fetchPackageById(packageId);
            const processedPackage = processPackageForUI(packageResponse.data);
            setPackageData(processedPackage);
          } catch (err) {
            console.warn('Failed to load package data:', err);
          }
        }

        // Track successful purchase (analytics)
        console.log('Purchase successful:', {
          packageId,
          userId: user?.id,
          orderCode
        });
      } catch (err) {
        setError(err instanceof Error ? err.message : 'C√≥ l·ªói x·∫£y ra khi t·∫£i th√¥ng tin');
        console.error('Load order/package data error:', err);
      } finally {
        setLoading(false);
      }
    };

    loadOrderAndPackageData();
  }, [packageId, orderCodeFromUrl]); const copyZaloLink = () => {
    if (packageData && orderCode) {
      const zaloLink = generateZaloLink(orderCode, packageData.name);
      navigator.clipboard.writeText(zaloLink);
      alert('ƒê√£ copy link Zalo!');
    }
  };

  if (loading) {
    return (
      <div className="bg-gray-50 min-h-screen flex items-center justify-center">
        <LoadingSpinner />
      </div>
    );
  }

  if (error) {
    return (
      <div className="bg-gray-50 min-h-screen flex items-center justify-center py-12">
        <div className="container px-4 w-full">
          <div className="max-w-md mx-auto text-center">
            <div className="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <span className="text-red-600 font-bold text-xl">!</span>
            </div>
            <h3 className="text-xl font-bold text-gray-900 mb-4">C√≥ l·ªói x·∫£y ra</h3>
            <p className="text-gray-600 mb-6">{error}</p>
            <Link to="/" className="btn-primary">Quay v·ªÅ trang ch·ªß</Link>
          </div>
        </div>
      </div>
    );
  }

  if (!packageData && !orderData) {
    return (
      <div className="container py-16 text-center">
        <h1 className="text-2xl font-bold text-gray-900 mb-4">Kh√¥ng t√¨m th·∫•y th√¥ng tin ƒë∆°n h√†ng</h1>
        <Link to="/" className="btn-primary">Quay v·ªÅ trang ch·ªß</Link>
      </div>
    );
  }

  // S·ª≠ d·ª•ng data t·ª´ order ho·∫∑c package
  const displayPackageName = orderData?.packageName || packageData?.name || 'G√≥i t∆∞ v·∫•n';
  const displayAmount = orderData?.amount || packageData?.price || 0;
  const displayDuration = packageData?.duration || '30 ph√∫t';
  const transactionStatus = orderData?.transaction ? formatTransactionStatus(orderData.transaction.status) : 'ƒê√£ thanh to√°n';

  return (
    <div className="bg-gray-50 min-h-screen flex items-center justify-center py-12">
      <div className="container px-4 w-full">
        <div className="max-w mx-auto">
          {/* Success Header */}
          <div className="text-center mb-8">
            <div className="w-20 h-20 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <CheckCircle className="w-12 h-12 text-green-600" />
            </div>
            <h1 className="text-3xl font-bold text-gray-900 mb-2">
              Thanh To√°n Th√†nh C√¥ng!
            </h1>
            <p className="text-gray-600">
              C·∫£m ∆°n b·∫°n ƒë√£ tin t∆∞·ªüng d·ªãch v·ª• c·ªßa TamSu Health
            </p>
          </div>

          {/* Order Details */}
          <div className="card mb-6">
            <h2 className="text-xl font-bold text-gray-900 mb-4">
              Chi ti·∫øt ƒë∆°n h√†ng
            </h2>

            <div className="space-y-3 mb-6">
              <div className="flex justify-between">
                <span className="text-gray-600">G√≥i d·ªãch v·ª•:</span>
                <span className="font-medium text-gray-900">{displayPackageName}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600">Th·ªùi l∆∞·ª£ng t∆∞ v·∫•n:</span>
                <span className="font-medium text-gray-900">{displayDuration}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600">T·ªïng ti·ªÅn:</span>
                <span className="font-bold text-green-600 text-lg">
                  {displayAmount.toLocaleString('vi-VN')}ƒë
                </span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600">Kh√°ch h√†ng:</span>
                <span className="font-medium text-gray-900">{user?.username || user?.email || 'Kh√°ch h√†ng'}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600">Tr·∫°ng th√°i:</span>
                <span className="font-medium text-green-600">{transactionStatus}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600">Th·ªùi gian:</span>
                <span className="font-medium text-gray-900">
                  {orderData?.createdAt ? new Date(orderData.createdAt).toLocaleString('vi-VN') : new Date().toLocaleString('vi-VN')}
                </span>
              </div>
            </div>
          </div>

          {/* Next Steps */}
          <div className="card mb-6">
            <h2 className="text-xl font-bold text-gray-900 mb-4 flex items-center">
              <MessageCircle className="w-5 h-5 mr-2 text-primary-600" />
              B∆∞·ªõc ti·∫øp theo
            </h2>

            <div className="space-y-4">
              <div className="flex items-start space-x-3">
                <div className="w-6 h-6 bg-primary-600 rounded-full flex items-center justify-center text-white text-sm font-bold mt-1">
                  1
                </div>
                <div>
                  <h3 className="font-semibold text-gray-900">Li√™n h·ªá qua Zalo</h3>
                  <p className="text-gray-600 text-sm">
                    Click v√†o n√∫t b√™n d∆∞·ªõi ƒë·ªÉ chuy·ªÉn ƒë·∫øn Zalo v√† b·∫Øt ƒë·∫ßu cu·ªôc t∆∞ v·∫•n
                  </p>
                </div>
              </div>

              <div className="flex items-start space-x-3">
                <div className="w-6 h-6 bg-primary-600 rounded-full flex items-center justify-center text-white text-sm font-bold mt-1">
                  2
                </div>
                <div>
                  <h3 className="font-semibold text-gray-900">Cung c·∫•p m√£ ƒë∆°n h√†ng</h3>
                  <p className="text-gray-600 text-sm">
                    Chia s·∫ª m√£ ƒë∆°n h√†ng <span className="font-medium">{orderCode}</span> v·ªõi t∆∞ v·∫•n vi√™n
                  </p>
                </div>
              </div>

              <div className="flex items-start space-x-3">
                <div className="w-6 h-6 bg-primary-600 rounded-full flex items-center justify-center text-white text-sm font-bold mt-1">
                  3
                </div>
                <div>
                  <h3 className="font-semibold text-gray-900">B·∫Øt ƒë·∫ßu t∆∞ v·∫•n</h3>
                  <p className="text-gray-600 text-sm">
                    Chuy√™n gia s·∫Ω t∆∞ v·∫•n cho b·∫°n trong {displayDuration}
                  </p>
                </div>
              </div>
            </div>
          </div>

          {/* Zalo Contact */}
          <div className="card mb-6">
            <h2 className="text-xl font-bold text-gray-900 mb-4">
              Li√™n h·ªá t∆∞ v·∫•n vi√™n
            </h2>

            <div className="bg-green-50 border border-green-200 rounded-lg p-4 mb-4">
              <div className="flex items-center space-x-2 mb-2">
                <MessageCircle className="w-5 h-5 text-green-600" />
                <span className="font-semibold text-green-800">T∆∞ v·∫•n qua Zalo</span>
              </div>
              <p className="text-green-700 text-sm mb-3">
                Click v√†o n√∫t b√™n d∆∞·ªõi ƒë·ªÉ m·ªü Zalo v√† b·∫Øt ƒë·∫ßu cu·ªôc tr√≤ chuy·ªán v·ªõi chuy√™n gia c·ªßa ch√∫ng t√¥i.
              </p>
              <div className="flex gap-2">
                <button
                  onClick={() => {
                    const zaloLink = generateZaloLink(orderCode, displayPackageName);
                    window.open(zaloLink, '_blank');
                  }}
                  className="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors flex items-center text-sm"
                >
                  <MessageCircle className="w-4 h-4 mr-2" />
                  M·ªü Zalo
                </button>
                <button
                  onClick={copyZaloLink}
                  className="bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-700 transition-colors flex items-center text-sm"
                >
                  <Copy className="w-4 h-4 mr-2" />
                  Copy Link
                </button>
              </div>
            </div>

            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
              <div className="flex items-center space-x-2 mb-2">
                <Phone className="w-5 h-5 text-blue-600" />
                <span className="font-semibold text-blue-800">Hotline h·ªó tr·ª£</span>
              </div>
              <p className="text-blue-700 text-sm mb-2">
                G·ªçi ngay n·∫øu c·∫ßn h·ªó tr·ª£ kh·∫©n c·∫•p ho·∫∑c c√≥ th·∫Øc m·∫Øc v·ªÅ ƒë∆°n h√†ng:
              </p>
              <p className="font-bold text-blue-900">üìû 1900-xxxx</p>
              <p className="text-blue-600 text-sm">Ho·∫°t ƒë·ªông 24/7</p>
            </div>
          </div>

          {/* Important Notes */}
          <div className="card mb-6">
            <h2 className="text-xl font-bold text-gray-900 mb-4">
              L∆∞u √Ω quan tr·ªçng
            </h2>

            <div className="space-y-3 text-sm">
              <div className="flex items-start space-x-2">
                <CheckCircle className="w-4 h-4 text-green-600 mt-0.5" />
                <span className="text-gray-700">
                  Cu·ªôc t∆∞ v·∫•n c√≥ th·ªùi l∆∞·ª£ng {displayDuration} v√† ho√†n to√†n b·∫£o m·∫≠t
                </span>
              </div>
              <div className="flex items-start space-x-2">
                <CheckCircle className="w-4 h-4 text-green-600 mt-0.5" />
                <span className="text-gray-700">
                  Ch√∫ng t√¥i kh√¥ng l∆∞u tr·ªØ n·ªôi dung cu·ªôc tr√≤ chuy·ªán c·ªßa b·∫°n
                </span>
              </div>
              <div className="flex items-start space-x-2">
                <CheckCircle className="w-4 h-4 text-green-600 mt-0.5" />
                <span className="text-gray-700">
                  Vui l√≤ng chu·∫©n b·ªã c√¢u h·ªèi tr∆∞·ªõc ƒë·ªÉ t·∫≠n d·ª•ng t·ªëi ƒëa th·ªùi gian t∆∞ v·∫•n
                </span>
              </div>
              <div className="flex items-start space-x-2">
                <Clock className="w-4 h-4 text-orange-600 mt-0.5" />
                <span className="text-gray-700">
                  Vui l√≤ng li√™n h·ªá trong v√≤ng 24 gi·ªù ƒë·ªÉ tr√°nh h·∫øt h·∫°n ƒë∆°n h√†ng
                </span>
              </div>
            </div>
          </div>

          {/* Action Buttons */}
          <div className="flex flex-col sm:flex-row gap-4 mb-16">
            <Link
              to="/"
              className="flex-1 text-center btn-secondary"
            >
              V·ªÅ Trang Ch·ªß
            </Link>
            <Link
              to={`/package/${packageId}`}
              className="flex-1 text-center btn-secondary"
            >
              Xem L·∫°i G√≥i D·ªãch V·ª•
            </Link>
          </div>
        </div>
      </div>
    </div>
  );
};

export default PurchaseSuccessPage;